{"id":"070123fd61a7dc074baa9ecb50000298","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/EncryptedBidContract.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract EncryptedBidContract {\r\n    struct EncryptedBid {\r\n        string encryptedData; // Hex string of encrypted payload\r\n        string iv;            // Hex string of AES IV\r\n    }\r\n\r\n    // sessionId => bidderId => bid\r\n    mapping(string => mapping(string => EncryptedBid)) public sessionBids;\r\n\r\n    // sessionId => list of bidderIds\r\n    mapping(string => string[]) private sessionBidderIds;\r\n\r\n    // Event emitted when a bid is submitted\r\n    event BidSubmitted(string sessionId, string bidderId);\r\n\r\n    /// @notice Submit a bid for a given session\r\n    function submitBid(\r\n        string calldata sessionId,\r\n        string calldata bidderId,\r\n        string calldata encryptedData,\r\n        string calldata iv\r\n    ) external {\r\n        // If it's a new bidder for the session, track the ID\r\n        if (bytes(sessionBids[sessionId][bidderId].encryptedData).length == 0) {\r\n            sessionBidderIds[sessionId].push(bidderId);\r\n        }\r\n\r\n        sessionBids[sessionId][bidderId] = EncryptedBid(encryptedData, iv);\r\n\r\n        emit BidSubmitted(sessionId, bidderId);\r\n    }\r\n\r\n    /// @notice Get bid for a session and bidder\r\n    function getBid(string calldata sessionId, string calldata bidderId)\r\n        external\r\n        view\r\n        returns (EncryptedBid memory)\r\n    {\r\n        return sessionBids[sessionId][bidderId];\r\n    }\r\n\r\n    /// @notice Get all bidderIds for a session\r\n    function getAllBidderIds(string calldata sessionId)\r\n        external\r\n        view\r\n        returns (string[] memory)\r\n    {\r\n        return sessionBidderIds[sessionId];\r\n    }\r\n}\r\n"},"contracts/lib/Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}\n"},"contracts/lib/ByteHasher.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\nlibrary ByteHasher {\n    /// @dev Creates a keccak256 hash of a bytestring.\n    /// @param value The bytestring to hash\n    /// @return The hash of the specified value\n    /// @dev `>> 8` makes sure that the result is included in our field\n    function hashToField(bytes memory value) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\n    }\n}"},"contracts/lib/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.24;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n"}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"runs":65535},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/EncryptedBidContract.sol":{"ast":{"absolutePath":"contracts/EncryptedBidContract.sol","exportedSymbols":{"EncryptedBidContract":[107]},"id":108,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"EncryptedBidContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":107,"linearizedBaseContracts":[107],"name":"EncryptedBidContract","nameLocation":"69:20:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EncryptedBidContract.EncryptedBid","id":6,"members":[{"constant":false,"id":3,"mutability":"mutable","name":"encryptedData","nameLocation":"135:13:0","nodeType":"VariableDeclaration","scope":6,"src":"128:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2,"name":"string","nodeType":"ElementaryTypeName","src":"128:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5,"mutability":"mutable","name":"iv","nameLocation":"201:2:0","nodeType":"VariableDeclaration","scope":6,"src":"194:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4,"name":"string","nodeType":"ElementaryTypeName","src":"194:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"EncryptedBid","nameLocation":"104:12:0","nodeType":"StructDefinition","scope":107,"src":"97:149:0","visibility":"public"},{"constant":false,"functionSelector":"b6584cd1","id":13,"mutability":"mutable","name":"sessionBids","nameLocation":"349:11:0","nodeType":"VariableDeclaration","scope":107,"src":"291:69:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$_$","typeString":"mapping(string => mapping(string => struct EncryptedBidContract.EncryptedBid))"},"typeName":{"id":12,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":7,"name":"string","nodeType":"ElementaryTypeName","src":"299:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"291:50:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$_$","typeString":"mapping(string => mapping(string => struct EncryptedBidContract.EncryptedBid))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":11,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":8,"name":"string","nodeType":"ElementaryTypeName","src":"317:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"309:31:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$","typeString":"mapping(string => struct EncryptedBidContract.EncryptedBid)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"EncryptedBid","nameLocations":["327:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":6,"src":"327:12:0"},"referencedDeclaration":6,"src":"327:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_storage_ptr","typeString":"struct EncryptedBidContract.EncryptedBid"}}}},"visibility":"public"},{"constant":false,"id":18,"mutability":"mutable","name":"sessionBidderIds","nameLocation":"444:16:0","nodeType":"VariableDeclaration","scope":107,"src":"408:52:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_array$_t_string_storage_$dyn_storage_$","typeString":"mapping(string => string[])"},"typeName":{"id":17,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":14,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"408:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_array$_t_string_storage_$dyn_storage_$","typeString":"mapping(string => string[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":15,"name":"string","nodeType":"ElementaryTypeName","src":"426:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":16,"nodeType":"ArrayTypeName","src":"426:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"visibility":"private"},{"anonymous":false,"eventSelector":"8ca29c64697f1118d070b0a2b93f2f864a0f71398ac22ddd7d39dea793804945","id":24,"name":"BidSubmitted","nameLocation":"521:12:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":false,"mutability":"mutable","name":"sessionId","nameLocation":"541:9:0","nodeType":"VariableDeclaration","scope":24,"src":"534:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":19,"name":"string","nodeType":"ElementaryTypeName","src":"534:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":false,"mutability":"mutable","name":"bidderId","nameLocation":"559:8:0","nodeType":"VariableDeclaration","scope":24,"src":"552:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":21,"name":"string","nodeType":"ElementaryTypeName","src":"552:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"533:35:0"},"src":"515:54:0"},{"body":{"id":73,"nodeType":"Block","src":"802:351:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"expression":{"baseExpression":{"baseExpression":{"id":38,"name":"sessionBids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"886:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$_$","typeString":"mapping(string memory => mapping(string memory => struct EncryptedBidContract.EncryptedBid storage ref))"}},"id":40,"indexExpression":{"id":39,"name":"sessionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"898:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"886:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$","typeString":"mapping(string memory => struct EncryptedBidContract.EncryptedBid storage ref)"}},"id":42,"indexExpression":{"id":41,"name":"bidderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"909:8:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"886:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_storage","typeString":"struct EncryptedBidContract.EncryptedBid storage ref"}},"id":43,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"919:13:0","memberName":"encryptedData","nodeType":"MemberAccess","referencedDeclaration":3,"src":"886:46:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":37,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"880:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":36,"name":"bytes","nodeType":"ElementaryTypeName","src":"880:5:0","typeDescriptions":{}}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"880:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"934:6:0","memberName":"length","nodeType":"MemberAccess","src":"880:60:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":46,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"944:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"880:65:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":56,"nodeType":"IfStatement","src":"876:140:0","trueBody":{"id":55,"nodeType":"Block","src":"947:69:0","statements":[{"expression":{"arguments":[{"id":52,"name":"bidderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"995:8:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"baseExpression":{"id":48,"name":"sessionBidderIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"962:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_array$_t_string_storage_$dyn_storage_$","typeString":"mapping(string memory => string storage ref[] storage ref)"}},"id":50,"indexExpression":{"id":49,"name":"sessionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"979:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"962:27:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"990:4:0","memberName":"push","nodeType":"MemberAccess","src":"962:32:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"962:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"962:42:0"}]}},{"expression":{"id":66,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":57,"name":"sessionBids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1028:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$_$","typeString":"mapping(string memory => mapping(string memory => struct EncryptedBidContract.EncryptedBid storage ref))"}},"id":60,"indexExpression":{"id":58,"name":"sessionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1040:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1028:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$","typeString":"mapping(string memory => struct EncryptedBidContract.EncryptedBid storage ref)"}},"id":61,"indexExpression":{"id":59,"name":"bidderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1051:8:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1028:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_storage","typeString":"struct EncryptedBidContract.EncryptedBid storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":63,"name":"encryptedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1076:13:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":64,"name":"iv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"1091:2:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":62,"name":"EncryptedBid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"1063:12:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_EncryptedBid_$6_storage_ptr_$","typeString":"type(struct EncryptedBidContract.EncryptedBid storage pointer)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1063:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_memory_ptr","typeString":"struct EncryptedBidContract.EncryptedBid memory"}},"src":"1028:66:0","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_storage","typeString":"struct EncryptedBidContract.EncryptedBid storage ref"}},"id":67,"nodeType":"ExpressionStatement","src":"1028:66:0"},{"eventCall":{"arguments":[{"id":69,"name":"sessionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1125:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":70,"name":"bidderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1136:8:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":68,"name":"BidSubmitted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"1112:12:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":72,"nodeType":"EmitStatement","src":"1107:38:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"577:44:0","text":"@notice Submit a bid for a given session"},"functionSelector":"af868dac","id":74,"implemented":true,"kind":"function","modifiers":[],"name":"submitBid","nameLocation":"636:9:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"sessionId","nameLocation":"672:9:0","nodeType":"VariableDeclaration","scope":74,"src":"656:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":26,"name":"string","nodeType":"ElementaryTypeName","src":"656:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":29,"mutability":"mutable","name":"bidderId","nameLocation":"708:8:0","nodeType":"VariableDeclaration","scope":74,"src":"692:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":28,"name":"string","nodeType":"ElementaryTypeName","src":"692:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":31,"mutability":"mutable","name":"encryptedData","nameLocation":"743:13:0","nodeType":"VariableDeclaration","scope":74,"src":"727:29:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":30,"name":"string","nodeType":"ElementaryTypeName","src":"727:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"iv","nameLocation":"783:2:0","nodeType":"VariableDeclaration","scope":74,"src":"767:18:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":32,"name":"string","nodeType":"ElementaryTypeName","src":"767:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"645:147:0"},"returnParameters":{"id":35,"nodeType":"ParameterList","parameters":[],"src":"802:0:0"},"scope":107,"src":"627:526:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":91,"nodeType":"Block","src":"1356:58:0","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":85,"name":"sessionBids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1374:11:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$_$","typeString":"mapping(string memory => mapping(string memory => struct EncryptedBidContract.EncryptedBid storage ref))"}},"id":87,"indexExpression":{"id":86,"name":"sessionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1386:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1374:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_EncryptedBid_$6_storage_$","typeString":"mapping(string memory => struct EncryptedBidContract.EncryptedBid storage ref)"}},"id":89,"indexExpression":{"id":88,"name":"bidderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"1397:8:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1374:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_storage","typeString":"struct EncryptedBidContract.EncryptedBid storage ref"}},"functionReturnParameters":84,"id":90,"nodeType":"Return","src":"1367:39:0"}]},"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"1161:44:0","text":"@notice Get bid for a session and bidder"},"functionSelector":"9da68881","id":92,"implemented":true,"kind":"function","modifiers":[],"name":"getBid","nameLocation":"1220:6:0","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"sessionId","nameLocation":"1243:9:0","nodeType":"VariableDeclaration","scope":92,"src":"1227:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":76,"name":"string","nodeType":"ElementaryTypeName","src":"1227:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"bidderId","nameLocation":"1270:8:0","nodeType":"VariableDeclaration","scope":92,"src":"1254:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":78,"name":"string","nodeType":"ElementaryTypeName","src":"1254:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1226:53:0"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1330:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_memory_ptr","typeString":"struct EncryptedBidContract.EncryptedBid"},"typeName":{"id":82,"nodeType":"UserDefinedTypeName","pathNode":{"id":81,"name":"EncryptedBid","nameLocations":["1330:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":6,"src":"1330:12:0"},"referencedDeclaration":6,"src":"1330:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_EncryptedBid_$6_storage_ptr","typeString":"struct EncryptedBidContract.EncryptedBid"}},"visibility":"internal"}],"src":"1329:21:0"},"scope":107,"src":"1211:203:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":105,"nodeType":"Block","src":"1595:53:0","statements":[{"expression":{"baseExpression":{"id":101,"name":"sessionBidderIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1613:16:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_array$_t_string_storage_$dyn_storage_$","typeString":"mapping(string memory => string storage ref[] storage ref)"}},"id":103,"indexExpression":{"id":102,"name":"sessionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"1630:9:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1613:27:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"functionReturnParameters":100,"id":104,"nodeType":"Return","src":"1606:34:0"}]},"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"1422:43:0","text":"@notice Get all bidderIds for a session"},"functionSelector":"4f020ec8","id":106,"implemented":true,"kind":"function","modifiers":[],"name":"getAllBidderIds","nameLocation":"1480:15:0","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"sessionId","nameLocation":"1512:9:0","nodeType":"VariableDeclaration","scope":106,"src":"1496:25:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":94,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:27:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":106,"src":"1573:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":97,"name":"string","nodeType":"ElementaryTypeName","src":"1573:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":98,"nodeType":"ArrayTypeName","src":"1573:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"1572:17:0"},"scope":107,"src":"1471:177:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":108,"src":"60:1591:0","usedErrors":[],"usedEvents":[24]}],"src":"33:1620:0"},"id":0},"contracts/lib/Address.sol":{"ast":{"absolutePath":"contracts/lib/Address.sol","exportedSymbols":{"Address":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":109,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":126,"linearizedBaseContracts":[126],"name":"Address","nameLocation":"65:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":124,"nodeType":"Block","src":"145:124:1","statements":[{"assignments":[117],"declarations":[{"constant":false,"id":117,"mutability":"mutable","name":"size","nameLocation":"163:4:1","nodeType":"VariableDeclaration","scope":124,"src":"155:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"155:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":118,"nodeType":"VariableDeclarationStatement","src":"155:12:1"},{"AST":{"nativeSrc":"186:52:1","nodeType":"YulBlock","src":"186:52:1","statements":[{"nativeSrc":"200:28:1","nodeType":"YulAssignment","src":"200:28:1","value":{"arguments":[{"name":"account","nativeSrc":"220:7:1","nodeType":"YulIdentifier","src":"220:7:1"}],"functionName":{"name":"extcodesize","nativeSrc":"208:11:1","nodeType":"YulIdentifier","src":"208:11:1"},"nativeSrc":"208:20:1","nodeType":"YulFunctionCall","src":"208:20:1"},"variableNames":[{"name":"size","nativeSrc":"200:4:1","nodeType":"YulIdentifier","src":"200:4:1"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":111,"isOffset":false,"isSlot":false,"src":"220:7:1","valueSize":1},{"declaration":117,"isOffset":false,"isSlot":false,"src":"200:4:1","valueSize":1}],"id":119,"nodeType":"InlineAssembly","src":"177:61:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":120,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"254:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"261:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"254:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":115,"id":123,"nodeType":"Return","src":"247:15:1"}]},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"88:10:1","nodeType":"FunctionDefinition","parameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"account","nameLocation":"107:7:1","nodeType":"VariableDeclaration","scope":125,"src":"99:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":110,"name":"address","nodeType":"ElementaryTypeName","src":"99:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"98:17:1"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":125,"src":"139:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":113,"name":"bool","nodeType":"ElementaryTypeName","src":"139:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"138:6:1"},"scope":126,"src":"79:190:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":127,"src":"57:214:1","usedErrors":[],"usedEvents":[]}],"src":"32:240:1"},"id":1},"contracts/lib/ByteHasher.sol":{"ast":{"absolutePath":"contracts/lib/ByteHasher.sol","exportedSymbols":{"ByteHasher":[150]},"id":151,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"ByteHasher","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":150,"linearizedBaseContracts":[150],"name":"ByteHasher","nameLocation":"65:10:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":148,"nodeType":"Block","src":"374:72:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"426:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":139,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"409:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"413:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"409:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"409:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":138,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"399:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"399:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"391:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"391:7:2","typeDescriptions":{}}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"391:43:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"438:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"391:48:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":135,"id":147,"nodeType":"Return","src":"384:55:2"}]},"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"82:214:2","text":"@dev Creates a keccak256 hash of a bytestring.\n @param value The bytestring to hash\n @return The hash of the specified value\n @dev `>> 8` makes sure that the result is included in our field"},"id":149,"implemented":true,"kind":"function","modifiers":[],"name":"hashToField","nameLocation":"310:11:2","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"value","nameLocation":"335:5:2","nodeType":"VariableDeclaration","scope":149,"src":"322:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":130,"name":"bytes","nodeType":"ElementaryTypeName","src":"322:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"321:20:2"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":149,"src":"365:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"364:9:2"},"scope":150,"src":"301:145:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":151,"src":"57:391:2","usedErrors":[],"usedEvents":[]}],"src":"32:416:2"},"id":2},"contracts/lib/SafeMath.sol":{"ast":{"absolutePath":"contracts/lib/SafeMath.sol","exportedSymbols":{"SafeMath":[263]},"id":264,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":152,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"57:99:3","text":" @title SafeMath\n @dev Unsigned math operations with safety checks that revert on error"},"fullyImplemented":true,"id":263,"linearizedBaseContracts":[263],"name":"SafeMath","nameLocation":"165:8:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":186,"nodeType":"Block","src":"328:354:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":163,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"559:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"564:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"559:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":169,"nodeType":"IfStatement","src":"555:45:3","trueBody":{"id":168,"nodeType":"Block","src":"567:33:3","statements":[{"expression":{"hexValue":"30","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"588:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":162,"id":167,"nodeType":"Return","src":"581:8:3"}]}},{"assignments":[171],"declarations":[{"constant":false,"id":171,"mutability":"mutable","name":"c","nameLocation":"618:1:3","nodeType":"VariableDeclaration","scope":186,"src":"610:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"610:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":175,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":172,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"622:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":173,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"626:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"622:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"610:17:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":177,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"645:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":178,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"649:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"645:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":180,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"654:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"645:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":176,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"637:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"637:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":183,"nodeType":"ExpressionStatement","src":"637:19:3"},{"expression":{"id":184,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"674:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":162,"id":185,"nodeType":"Return","src":"667:8:3"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"180:76:3","text":" @dev Multiplies two unsigned integers, reverts on overflow."},"id":187,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"270:3:3","nodeType":"FunctionDefinition","parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"a","nameLocation":"282:1:3","nodeType":"VariableDeclaration","scope":187,"src":"274:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint256","nodeType":"ElementaryTypeName","src":"274:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"b","nameLocation":"293:1:3","nodeType":"VariableDeclaration","scope":187,"src":"285:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint256","nodeType":"ElementaryTypeName","src":"285:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"273:22:3"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":187,"src":"319:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":160,"name":"uint256","nodeType":"ElementaryTypeName","src":"319:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"318:9:3"},"scope":263,"src":"261:421:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":211,"nodeType":"Block","src":"877:229:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":198,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"961:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"965:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"961:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":197,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"953:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"953:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":202,"nodeType":"ExpressionStatement","src":"953:14:3"},{"assignments":[204],"declarations":[{"constant":false,"id":204,"mutability":"mutable","name":"c","nameLocation":"985:1:3","nodeType":"VariableDeclaration","scope":211,"src":"977:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"977:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":208,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":205,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"989:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":206,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"993:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"989:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"977:17:3"},{"expression":{"id":209,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"1098:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":196,"id":210,"nodeType":"Return","src":"1091:8:3"}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"688:117:3","text":" @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero."},"id":212,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"819:3:3","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"a","nameLocation":"831:1:3","nodeType":"VariableDeclaration","scope":212,"src":"823:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"823:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"b","nameLocation":"842:1:3","nodeType":"VariableDeclaration","scope":212,"src":"834:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"822:22:3"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":212,"src":"868:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"868:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"867:9:3"},"scope":263,"src":"810:296:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":236,"nodeType":"Block","src":"1304:78:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":223,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"1322:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":224,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1327:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1322:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":222,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1314:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1314:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":227,"nodeType":"ExpressionStatement","src":"1314:15:3"},{"assignments":[229],"declarations":[{"constant":false,"id":229,"mutability":"mutable","name":"c","nameLocation":"1347:1:3","nodeType":"VariableDeclaration","scope":236,"src":"1339:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":228,"name":"uint256","nodeType":"ElementaryTypeName","src":"1339:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":233,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":230,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1351:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":231,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"1355:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1351:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1339:17:3"},{"expression":{"id":234,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"1374:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":221,"id":235,"nodeType":"Return","src":"1367:8:3"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"1112:120:3","text":" @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend)."},"id":237,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"1246:3:3","nodeType":"FunctionDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"a","nameLocation":"1258:1:3","nodeType":"VariableDeclaration","scope":237,"src":"1250:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1250:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"b","nameLocation":"1269:1:3","nodeType":"VariableDeclaration","scope":237,"src":"1261:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":216,"name":"uint256","nodeType":"ElementaryTypeName","src":"1261:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1249:22:3"},"returnParameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":237,"src":"1295:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":219,"name":"uint256","nodeType":"ElementaryTypeName","src":"1295:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1294:9:3"},"scope":263,"src":"1237:145:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":261,"nodeType":"Block","src":"1530:78:3","statements":[{"assignments":[248],"declarations":[{"constant":false,"id":248,"mutability":"mutable","name":"c","nameLocation":"1548:1:3","nodeType":"VariableDeclaration","scope":261,"src":"1540:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"1540:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":252,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":249,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"1552:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":250,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"1556:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1552:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1540:17:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":254,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"1575:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":255,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"1580:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1575:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":253,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1567:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1567:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":258,"nodeType":"ExpressionStatement","src":"1567:15:3"},{"expression":{"id":259,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"1600:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":246,"id":260,"nodeType":"Return","src":"1593:8:3"}]},"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"1388:70:3","text":" @dev Adds two unsigned integers, reverts on overflow."},"id":262,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"1472:3:3","nodeType":"FunctionDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"a","nameLocation":"1484:1:3","nodeType":"VariableDeclaration","scope":262,"src":"1476:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"b","nameLocation":"1495:1:3","nodeType":"VariableDeclaration","scope":262,"src":"1487:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"1487:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1475:22:3"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":262,"src":"1521:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"1521:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1520:9:3"},"scope":263,"src":"1463:145:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":264,"src":"157:1453:3","usedErrors":[],"usedEvents":[]}],"src":"32:1579:3"},"id":3}},"contracts":{"contracts/EncryptedBidContract.sol":{"EncryptedBidContract":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"sessionId","type":"string"},{"indexed":false,"internalType":"string","name":"bidderId","type":"string"}],"name":"BidSubmitted","type":"event"},{"inputs":[{"internalType":"string","name":"sessionId","type":"string"}],"name":"getAllBidderIds","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"sessionId","type":"string"},{"internalType":"string","name":"bidderId","type":"string"}],"name":"getBid","outputs":[{"components":[{"internalType":"string","name":"encryptedData","type":"string"},{"internalType":"string","name":"iv","type":"string"}],"internalType":"struct EncryptedBidContract.EncryptedBid","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"name":"sessionBids","outputs":[{"internalType":"string","name":"encryptedData","type":"string"},{"internalType":"string","name":"iv","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"sessionId","type":"string"},{"internalType":"string","name":"bidderId","type":"string"},{"internalType":"string","name":"encryptedData","type":"string"},{"internalType":"string","name":"iv","type":"string"}],"name":"submitBid","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610d0a908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081634f020ec814610855575080639da6888114610739578063af868dac1461013d5763b6584cd11461004b57600080fd5b346101385760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385767ffffffffffffffff6004358181116101385761009b903690600401610af1565b6024359182116101385760206100f1916100d4826100c0610126963690600401610af1565b9281604051938285809451938492016109c9565b8101600081520301902082604051948386809551938492016109c9565b820190815203019020610134610112600161010b84610b62565b9301610b62565b6040519384936040855260408501906109ec565b9083820360208501526109ec565b0390f35b600080fd5b346101385760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385760043567ffffffffffffffff81116101385761018c90369060040161099b565b9060243567ffffffffffffffff8111610138576101ad90369060040161099b565b929060443567ffffffffffffffff8111610138576101cf90369060040161099b565b949060643567ffffffffffffffff8111610138576101f190369060040161099b565b909161021b610215604051888a82376020818a810160008152030190208688610c26565b54610b0f565b1561056d575b9061023e6102479392604051996102378b610a2f565b3691610a8c565b88523691610a8c565b6020860190815261026d6040518587823760208187810160008152030190208385610c26565b955180519067ffffffffffffffff821161048f576102958261028f8a54610b0f565b8a610c3f565b602090601f83116001146104c9576102e39291600091836104be575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b86555b600180960190519586519067ffffffffffffffff821161048f576103148261030e8554610b0f565b85610c3f565b602090601f83116001146103c25750816103b29594939261038a927f8ca29c64697f1118d070b0a2b93f2f864a0f71398ac22ddd7d39dea7938049459a6000926103b75750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b90555b6103a4604051958695604087526040870191610c95565b918483036020860152610c95565b0390a1005b015190508a806102b1565b977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316846000526020600020996000905b8282106104765750509860019284926103b2989796957f8ca29c64697f1118d070b0a2b93f2f864a0f71398ac22ddd7d39dea7938049459c1061043f575b505050811b01905561038d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055898080610432565b848401518c559a8b019a602094850194909101906103f4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b0151905089806102b1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316918960005260206000209260005b818110610555575090846001959493921061051e575b505050811b0186556102e6565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055888080610511565b929360206001819287860151815501950193016104fb565b6040518688823760208188810160018152030190208054906801000000000000000082101561048f576001820180825582101561070a5760005260206000200167ffffffffffffffff851161048f576105d0856105ca8354610b0f565b83610c3f565b846000601f821160011461063f5791610627826102479796959361023e95600091610634575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b90555b9192935050610221565b90508a01358e6105f6565b60008381526020812092505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0881681106106f25750916102479594939161023e93887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08116106106ba575b5050600187811b01905561062a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88a60031b161c19908a01351690558b806106ab565b9091602060018192858c01358155019301910161064b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b346101385760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385767ffffffffffffffff6004358181116101385761078990369060040161099b565b906024359283116101385760206107db926107ab61082495369060040161099b565b9290936060826040516107bd81610a2f565b82815201528260405193849283378101600081520301902091610c26565b6101346108016001604051936107f085610a2f565b6107f981610b62565b855201610b62565b6020830190815260405193849360208552516040602086015260608501906109ec565b90517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160408501526109ec565b34610138576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385767ffffffffffffffff600435818111610138576108a690369060040161099b565b809185378301928281600195600181520301902090815490811161048f578383604051926108d9828260051b0185610a4b565b8084528184018095600052826000206000915b8383106109725750505050604051928184019082855251809152604084019160408260051b86010195926000905b8382106109275786880387f35b909192939483806109618a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b869d0301865289516109ec565b99970195949391909101910161091a565b90858086819a989594610987859b999b610b62565b8152019201920192509694969593956108ec565b9181601f840112156101385782359167ffffffffffffffff8311610138576020838186019501011161013857565b60005b8381106109dc5750506000910152565b81810151838201526020016109cc565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610a28815180928187528780880191016109c9565b0116010190565b6040810190811067ffffffffffffffff82111761048f57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048f57604052565b92919267ffffffffffffffff821161048f5760405191610ad460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610a4b565b829481845281830111610138578281602093846000960137010152565b9080601f8301121561013857816020610b0c93359101610a8c565b90565b90600182811c92168015610b58575b6020831014610b2957565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610b1e565b90604051918260008254610b7581610b0f565b90818452602094600191600181169081600014610be55750600114610ba6575b505050610ba492500383610a4b565b565b600090815285812095935091905b818310610bcd575050610ba49350820101388080610b95565b85548884018501529485019487945091830191610bb4565b915050610ba49593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388080610b95565b6020919283604051948593843782019081520301902090565b90601f8111610c4d57505050565b6000916000526020600020906020601f850160051c83019410610c8b575b601f0160051c01915b828110610c8057505050565b818155600101610c74565b9092508290610c6b565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601376000858286010152011601019056fea26469706673582212202adeff3b719a00a9d0a36f8754532acfdb6538dbe6b75cd4639b7b0f9710e0c864736f6c63430008180033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0xD0A SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x4F020EC8 EQ PUSH2 0x855 JUMPI POP DUP1 PUSH4 0x9DA68881 EQ PUSH2 0x739 JUMPI DUP1 PUSH4 0xAF868DAC EQ PUSH2 0x13D JUMPI PUSH4 0xB6584CD1 EQ PUSH2 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x9B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xAF1 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x138 JUMPI PUSH1 0x20 PUSH2 0xF1 SWAP2 PUSH2 0xD4 DUP3 PUSH2 0xC0 PUSH2 0x126 SWAP7 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xAF1 JUMP JUMPDEST SWAP3 DUP2 PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x9C9 JUMP JUMPDEST DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD SWAP5 DUP4 DUP7 DUP1 SWAP6 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x9C9 JUMP JUMPDEST DUP3 ADD SWAP1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 PUSH2 0x134 PUSH2 0x112 PUSH1 0x1 PUSH2 0x10B DUP5 PUSH2 0xB62 JUMP JUMPDEST SWAP4 ADD PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x9EC JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x9EC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x18C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x1AD SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x1CF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP5 SWAP1 PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x1F1 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x21B PUSH2 0x215 PUSH1 0x40 MLOAD DUP9 DUP11 DUP3 CALLDATACOPY PUSH1 0x20 DUP2 DUP11 DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP7 DUP9 PUSH2 0xC26 JUMP JUMPDEST SLOAD PUSH2 0xB0F JUMP JUMPDEST ISZERO PUSH2 0x56D JUMPI JUMPDEST SWAP1 PUSH2 0x23E PUSH2 0x247 SWAP4 SWAP3 PUSH1 0x40 MLOAD SWAP10 PUSH2 0x237 DUP12 PUSH2 0xA2F JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0xA8C JUMP JUMPDEST DUP9 MSTORE CALLDATASIZE SWAP2 PUSH2 0xA8C JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x26D PUSH1 0x40 MLOAD DUP6 DUP8 DUP3 CALLDATACOPY PUSH1 0x20 DUP2 DUP8 DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP4 DUP6 PUSH2 0xC26 JUMP JUMPDEST SWAP6 MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x48F JUMPI PUSH2 0x295 DUP3 PUSH2 0x28F DUP11 SLOAD PUSH2 0xB0F JUMP JUMPDEST DUP11 PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x4C9 JUMPI PUSH2 0x2E3 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x4BE JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST DUP7 SSTORE JUMPDEST PUSH1 0x1 DUP1 SWAP7 ADD SWAP1 MLOAD SWAP6 DUP7 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x48F JUMPI PUSH2 0x314 DUP3 PUSH2 0x30E DUP6 SLOAD PUSH2 0xB0F JUMP JUMPDEST DUP6 PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3C2 JUMPI POP DUP2 PUSH2 0x3B2 SWAP6 SWAP5 SWAP4 SWAP3 PUSH2 0x38A SWAP3 PUSH32 0x8CA29C64697F1118D070B0A2B93F2F864A0F71398AC22DDD7D39DEA793804945 SWAP11 PUSH1 0x0 SWAP3 PUSH2 0x3B7 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST PUSH2 0x3A4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0x40 DUP8 MSTORE PUSH1 0x40 DUP8 ADD SWAP2 PUSH2 0xC95 JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xC95 JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP11 DUP1 PUSH2 0x2B1 JUMP JUMPDEST SWAP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP10 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x476 JUMPI POP POP SWAP9 PUSH1 0x1 SWAP3 DUP5 SWAP3 PUSH2 0x3B2 SWAP9 SWAP8 SWAP7 SWAP6 PUSH32 0x8CA29C64697F1118D070B0A2B93F2F864A0F71398AC22DDD7D39DEA793804945 SWAP13 LT PUSH2 0x43F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x38D JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP10 DUP1 DUP1 PUSH2 0x432 JUMP JUMPDEST DUP5 DUP5 ADD MLOAD DUP13 SSTORE SWAP11 DUP12 ADD SWAP11 PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x3F4 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP10 DUP1 PUSH2 0x2B1 JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND SWAP2 DUP10 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x555 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x51E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH2 0x2E6 JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x511 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 DUP9 DUP3 CALLDATACOPY PUSH1 0x20 DUP2 DUP9 DUP2 ADD PUSH1 0x1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x48F JUMPI PUSH1 0x1 DUP3 ADD DUP1 DUP3 SSTORE DUP3 LT ISZERO PUSH2 0x70A JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP6 GT PUSH2 0x48F JUMPI PUSH2 0x5D0 DUP6 PUSH2 0x5CA DUP4 SLOAD PUSH2 0xB0F JUMP JUMPDEST DUP4 PUSH2 0xC3F JUMP JUMPDEST DUP5 PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x63F JUMPI SWAP2 PUSH2 0x627 DUP3 PUSH2 0x247 SWAP8 SWAP7 SWAP6 SWAP4 PUSH2 0x23E SWAP6 PUSH1 0x0 SWAP2 PUSH2 0x634 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SWAP2 SWAP3 SWAP4 POP POP PUSH2 0x221 JUMP JUMPDEST SWAP1 POP DUP11 ADD CALLDATALOAD DUP15 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP3 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP9 AND DUP2 LT PUSH2 0x6F2 JUMPI POP SWAP2 PUSH2 0x247 SWAP6 SWAP5 SWAP4 SWAP2 PUSH2 0x23E SWAP4 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 AND LT PUSH2 0x6BA JUMPI JUMPDEST POP POP PUSH1 0x1 DUP8 DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x62A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP11 PUSH1 0x3 SHL AND SHR NOT SWAP1 DUP11 ADD CALLDATALOAD AND SWAP1 SSTORE DUP12 DUP1 PUSH2 0x6AB JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP13 ADD CALLDATALOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x64B JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x789 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 DUP4 GT PUSH2 0x138 JUMPI PUSH1 0x20 PUSH2 0x7DB SWAP3 PUSH2 0x7AB PUSH2 0x824 SWAP6 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD PUSH2 0x7BD DUP2 PUSH2 0xA2F JUMP JUMPDEST DUP3 DUP2 MSTORE ADD MSTORE DUP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 DUP4 CALLDATACOPY DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP2 PUSH2 0xC26 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x801 PUSH1 0x1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x7F0 DUP6 PUSH2 0xA2F JUMP JUMPDEST PUSH2 0x7F9 DUP2 PUSH2 0xB62 JUMP JUMPDEST DUP6 MSTORE ADD PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x20 DUP6 MSTORE MLOAD PUSH1 0x40 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x9EC JUMP JUMPDEST SWAP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP5 DUP4 SUB ADD PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x9EC JUMP JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x8A6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST DUP1 SWAP2 DUP6 CALLDATACOPY DUP4 ADD SWAP3 DUP3 DUP2 PUSH1 0x1 SWAP6 PUSH1 0x1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 GT PUSH2 0x48F JUMPI DUP4 DUP4 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x8D9 DUP3 DUP3 PUSH1 0x5 SHL ADD DUP6 PUSH2 0xA4B JUMP JUMPDEST DUP1 DUP5 MSTORE DUP2 DUP5 ADD DUP1 SWAP6 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x972 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP3 DUP2 DUP5 ADD SWAP1 DUP3 DUP6 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 PUSH1 0x40 DUP3 PUSH1 0x5 SHL DUP7 ADD ADD SWAP6 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x927 JUMPI DUP7 DUP9 SUB DUP8 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 DUP4 DUP1 PUSH2 0x961 DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP12 DUP7 SWAP14 SUB ADD DUP7 MSTORE DUP10 MLOAD PUSH2 0x9EC JUMP JUMPDEST SWAP10 SWAP8 ADD SWAP6 SWAP5 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x91A JUMP JUMPDEST SWAP1 DUP6 DUP1 DUP7 DUP2 SWAP11 SWAP9 SWAP6 SWAP5 PUSH2 0x987 DUP6 SWAP12 SWAP10 SWAP12 PUSH2 0xB62 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP3 POP SWAP7 SWAP5 SWAP7 SWAP6 SWAP4 SWAP6 PUSH2 0x8EC JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x138 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x138 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x138 JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x9DC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9CC JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0xA28 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x9C9 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x48F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x48F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xAD4 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0xA4B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x138 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x138 JUMPI DUP2 PUSH1 0x20 PUSH2 0xB0C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0xA8C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xB58 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xB29 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xB1E JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD PUSH2 0xB75 DUP2 PUSH2 0xB0F JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x20 SWAP5 PUSH1 0x1 SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xBE5 JUMPI POP PUSH1 0x1 EQ PUSH2 0xBA6 JUMPI JUMPDEST POP POP POP PUSH2 0xBA4 SWAP3 POP SUB DUP4 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE DUP6 DUP2 KECCAK256 SWAP6 SWAP4 POP SWAP2 SWAP1 JUMPDEST DUP2 DUP4 LT PUSH2 0xBCD JUMPI POP POP PUSH2 0xBA4 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 DUP1 PUSH2 0xB95 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0xBB4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBA4 SWAP6 SWAP4 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 DUP1 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 CALLDATACOPY DUP3 ADD SWAP1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0xC4D JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0xC8B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xC80 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xC74 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH1 0x1F DUP3 PUSH1 0x20 SWAP5 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 DUP2 DUP7 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xDE SELFDESTRUCT EXTCODESIZE PUSH18 0x9A00A9D0A36F8754532ACFDB6538DBE6B75C 0xD4 PUSH4 0x9B7B0F97 LT 0xE0 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"60:1591:0:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_available_length_string":{"entryPoint":2700,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string":{"entryPoint":2801,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string_calldata":{"entryPoint":2459,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":2540,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":3221,"id":null,"parameterSlots":3,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":3135,"id":null,"parameterSlots":3,"returnSlots":0},"copy_array_from_storage_to_memory_string":{"entryPoint":2914,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2505,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2831,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2635,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_6418":{"entryPoint":2607,"id":null,"parameterSlots":1,"returnSlots":0},"packed_hashed_string_calldata_uint256_to_string_uint":{"entryPoint":3110,"id":null,"parameterSlots":3,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c9081634f020ec814610855575080639da6888114610739578063af868dac1461013d5763b6584cd11461004b57600080fd5b346101385760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385767ffffffffffffffff6004358181116101385761009b903690600401610af1565b6024359182116101385760206100f1916100d4826100c0610126963690600401610af1565b9281604051938285809451938492016109c9565b8101600081520301902082604051948386809551938492016109c9565b820190815203019020610134610112600161010b84610b62565b9301610b62565b6040519384936040855260408501906109ec565b9083820360208501526109ec565b0390f35b600080fd5b346101385760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385760043567ffffffffffffffff81116101385761018c90369060040161099b565b9060243567ffffffffffffffff8111610138576101ad90369060040161099b565b929060443567ffffffffffffffff8111610138576101cf90369060040161099b565b949060643567ffffffffffffffff8111610138576101f190369060040161099b565b909161021b610215604051888a82376020818a810160008152030190208688610c26565b54610b0f565b1561056d575b9061023e6102479392604051996102378b610a2f565b3691610a8c565b88523691610a8c565b6020860190815261026d6040518587823760208187810160008152030190208385610c26565b955180519067ffffffffffffffff821161048f576102958261028f8a54610b0f565b8a610c3f565b602090601f83116001146104c9576102e39291600091836104be575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b86555b600180960190519586519067ffffffffffffffff821161048f576103148261030e8554610b0f565b85610c3f565b602090601f83116001146103c25750816103b29594939261038a927f8ca29c64697f1118d070b0a2b93f2f864a0f71398ac22ddd7d39dea7938049459a6000926103b75750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b90555b6103a4604051958695604087526040870191610c95565b918483036020860152610c95565b0390a1005b015190508a806102b1565b977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316846000526020600020996000905b8282106104765750509860019284926103b2989796957f8ca29c64697f1118d070b0a2b93f2f864a0f71398ac22ddd7d39dea7938049459c1061043f575b505050811b01905561038d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055898080610432565b848401518c559a8b019a602094850194909101906103f4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b0151905089806102b1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08316918960005260206000209260005b818110610555575090846001959493921061051e575b505050811b0186556102e6565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055888080610511565b929360206001819287860151815501950193016104fb565b6040518688823760208188810160018152030190208054906801000000000000000082101561048f576001820180825582101561070a5760005260206000200167ffffffffffffffff851161048f576105d0856105ca8354610b0f565b83610c3f565b846000601f821160011461063f5791610627826102479796959361023e95600091610634575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790565b90555b9192935050610221565b90508a01358e6105f6565b60008381526020812092505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0881681106106f25750916102479594939161023e93887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08116106106ba575b5050600187811b01905561062a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88a60031b161c19908a01351690558b806106ab565b9091602060018192858c01358155019301910161064b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b346101385760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385767ffffffffffffffff6004358181116101385761078990369060040161099b565b906024359283116101385760206107db926107ab61082495369060040161099b565b9290936060826040516107bd81610a2f565b82815201528260405193849283378101600081520301902091610c26565b6101346108016001604051936107f085610a2f565b6107f981610b62565b855201610b62565b6020830190815260405193849360208552516040602086015260608501906109ec565b90517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160408501526109ec565b34610138576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101385767ffffffffffffffff600435818111610138576108a690369060040161099b565b809185378301928281600195600181520301902090815490811161048f578383604051926108d9828260051b0185610a4b565b8084528184018095600052826000206000915b8383106109725750505050604051928184019082855251809152604084019160408260051b86010195926000905b8382106109275786880387f35b909192939483806109618a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b869d0301865289516109ec565b99970195949391909101910161091a565b90858086819a989594610987859b999b610b62565b8152019201920192509694969593956108ec565b9181601f840112156101385782359167ffffffffffffffff8311610138576020838186019501011161013857565b60005b8381106109dc5750506000910152565b81810151838201526020016109cc565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610a28815180928187528780880191016109c9565b0116010190565b6040810190811067ffffffffffffffff82111761048f57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048f57604052565b92919267ffffffffffffffff821161048f5760405191610ad460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610a4b565b829481845281830111610138578281602093846000960137010152565b9080601f8301121561013857816020610b0c93359101610a8c565b90565b90600182811c92168015610b58575b6020831014610b2957565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610b1e565b90604051918260008254610b7581610b0f565b90818452602094600191600181169081600014610be55750600114610ba6575b505050610ba492500383610a4b565b565b600090815285812095935091905b818310610bcd575050610ba49350820101388080610b95565b85548884018501529485019487945091830191610bb4565b915050610ba49593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388080610b95565b6020919283604051948593843782019081520301902090565b90601f8111610c4d57505050565b6000916000526020600020906020601f850160051c83019410610c8b575b601f0160051c01915b828110610c8057505050565b818155600101610c74565b9092508290610c6b565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601376000858286010152011601019056fea26469706673582212202adeff3b719a00a9d0a36f8754532acfdb6538dbe6b75cd4639b7b0f9710e0c864736f6c63430008180033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x4F020EC8 EQ PUSH2 0x855 JUMPI POP DUP1 PUSH4 0x9DA68881 EQ PUSH2 0x739 JUMPI DUP1 PUSH4 0xAF868DAC EQ PUSH2 0x13D JUMPI PUSH4 0xB6584CD1 EQ PUSH2 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x9B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xAF1 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x138 JUMPI PUSH1 0x20 PUSH2 0xF1 SWAP2 PUSH2 0xD4 DUP3 PUSH2 0xC0 PUSH2 0x126 SWAP7 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xAF1 JUMP JUMPDEST SWAP3 DUP2 PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x9C9 JUMP JUMPDEST DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP3 PUSH1 0x40 MLOAD SWAP5 DUP4 DUP7 DUP1 SWAP6 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x9C9 JUMP JUMPDEST DUP3 ADD SWAP1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 PUSH2 0x134 PUSH2 0x112 PUSH1 0x1 PUSH2 0x10B DUP5 PUSH2 0xB62 JUMP JUMPDEST SWAP4 ADD PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x9EC JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x9EC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x18C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x1AD SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x1CF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP5 SWAP1 PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x1F1 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x21B PUSH2 0x215 PUSH1 0x40 MLOAD DUP9 DUP11 DUP3 CALLDATACOPY PUSH1 0x20 DUP2 DUP11 DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP7 DUP9 PUSH2 0xC26 JUMP JUMPDEST SLOAD PUSH2 0xB0F JUMP JUMPDEST ISZERO PUSH2 0x56D JUMPI JUMPDEST SWAP1 PUSH2 0x23E PUSH2 0x247 SWAP4 SWAP3 PUSH1 0x40 MLOAD SWAP10 PUSH2 0x237 DUP12 PUSH2 0xA2F JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0xA8C JUMP JUMPDEST DUP9 MSTORE CALLDATASIZE SWAP2 PUSH2 0xA8C JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x26D PUSH1 0x40 MLOAD DUP6 DUP8 DUP3 CALLDATACOPY PUSH1 0x20 DUP2 DUP8 DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP4 DUP6 PUSH2 0xC26 JUMP JUMPDEST SWAP6 MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x48F JUMPI PUSH2 0x295 DUP3 PUSH2 0x28F DUP11 SLOAD PUSH2 0xB0F JUMP JUMPDEST DUP11 PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x4C9 JUMPI PUSH2 0x2E3 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x4BE JUMPI JUMPDEST POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST DUP7 SSTORE JUMPDEST PUSH1 0x1 DUP1 SWAP7 ADD SWAP1 MLOAD SWAP6 DUP7 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x48F JUMPI PUSH2 0x314 DUP3 PUSH2 0x30E DUP6 SLOAD PUSH2 0xB0F JUMP JUMPDEST DUP6 PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3C2 JUMPI POP DUP2 PUSH2 0x3B2 SWAP6 SWAP5 SWAP4 SWAP3 PUSH2 0x38A SWAP3 PUSH32 0x8CA29C64697F1118D070B0A2B93F2F864A0F71398AC22DDD7D39DEA793804945 SWAP11 PUSH1 0x0 SWAP3 PUSH2 0x3B7 JUMPI POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST PUSH2 0x3A4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0x40 DUP8 MSTORE PUSH1 0x40 DUP8 ADD SWAP2 PUSH2 0xC95 JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xC95 JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP11 DUP1 PUSH2 0x2B1 JUMP JUMPDEST SWAP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP10 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x476 JUMPI POP POP SWAP9 PUSH1 0x1 SWAP3 DUP5 SWAP3 PUSH2 0x3B2 SWAP9 SWAP8 SWAP7 SWAP6 PUSH32 0x8CA29C64697F1118D070B0A2B93F2F864A0F71398AC22DDD7D39DEA793804945 SWAP13 LT PUSH2 0x43F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x38D JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP10 DUP1 DUP1 PUSH2 0x432 JUMP JUMPDEST DUP5 DUP5 ADD MLOAD DUP13 SSTORE SWAP11 DUP12 ADD SWAP11 PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x3F4 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP10 DUP1 PUSH2 0x2B1 JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 AND SWAP2 DUP10 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x555 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x51E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH2 0x2E6 JUMP JUMPDEST ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x511 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 DUP9 DUP3 CALLDATACOPY PUSH1 0x20 DUP2 DUP9 DUP2 ADD PUSH1 0x1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x48F JUMPI PUSH1 0x1 DUP3 ADD DUP1 DUP3 SSTORE DUP3 LT ISZERO PUSH2 0x70A JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP6 GT PUSH2 0x48F JUMPI PUSH2 0x5D0 DUP6 PUSH2 0x5CA DUP4 SLOAD PUSH2 0xB0F JUMP JUMPDEST DUP4 PUSH2 0xC3F JUMP JUMPDEST DUP5 PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x63F JUMPI SWAP2 PUSH2 0x627 DUP3 PUSH2 0x247 SWAP8 SWAP7 SWAP6 SWAP4 PUSH2 0x23E SWAP6 PUSH1 0x0 SWAP2 PUSH2 0x634 JUMPI JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST SWAP2 SWAP3 SWAP4 POP POP PUSH2 0x221 JUMP JUMPDEST SWAP1 POP DUP11 ADD CALLDATALOAD DUP15 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP3 POP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP9 AND DUP2 LT PUSH2 0x6F2 JUMPI POP SWAP2 PUSH2 0x247 SWAP6 SWAP5 SWAP4 SWAP2 PUSH2 0x23E SWAP4 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 AND LT PUSH2 0x6BA JUMPI JUMPDEST POP POP PUSH1 0x1 DUP8 DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x62A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP11 PUSH1 0x3 SHL AND SHR NOT SWAP1 DUP11 ADD CALLDATALOAD AND SWAP1 SSTORE DUP12 DUP1 PUSH2 0x6AB JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP13 ADD CALLDATALOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x64B JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x789 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 DUP4 GT PUSH2 0x138 JUMPI PUSH1 0x20 PUSH2 0x7DB SWAP3 PUSH2 0x7AB PUSH2 0x824 SWAP6 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD PUSH2 0x7BD DUP2 PUSH2 0xA2F JUMP JUMPDEST DUP3 DUP2 MSTORE ADD MSTORE DUP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 DUP4 CALLDATACOPY DUP2 ADD PUSH1 0x0 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP2 PUSH2 0xC26 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x801 PUSH1 0x1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x7F0 DUP6 PUSH2 0xA2F JUMP JUMPDEST PUSH2 0x7F9 DUP2 PUSH2 0xB62 JUMP JUMPDEST DUP6 MSTORE ADD PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x20 DUP6 MSTORE MLOAD PUSH1 0x40 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x9EC JUMP JUMPDEST SWAP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP5 DUP4 SUB ADD PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x9EC JUMP JUMPDEST CALLVALUE PUSH2 0x138 JUMPI PUSH1 0x20 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x138 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x138 JUMPI PUSH2 0x8A6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x99B JUMP JUMPDEST DUP1 SWAP2 DUP6 CALLDATACOPY DUP4 ADD SWAP3 DUP3 DUP2 PUSH1 0x1 SWAP6 PUSH1 0x1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 GT PUSH2 0x48F JUMPI DUP4 DUP4 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x8D9 DUP3 DUP3 PUSH1 0x5 SHL ADD DUP6 PUSH2 0xA4B JUMP JUMPDEST DUP1 DUP5 MSTORE DUP2 DUP5 ADD DUP1 SWAP6 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x972 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP3 DUP2 DUP5 ADD SWAP1 DUP3 DUP6 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 PUSH1 0x40 DUP3 PUSH1 0x5 SHL DUP7 ADD ADD SWAP6 SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x927 JUMPI DUP7 DUP9 SUB DUP8 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 DUP4 DUP1 PUSH2 0x961 DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP12 DUP7 SWAP14 SUB ADD DUP7 MSTORE DUP10 MLOAD PUSH2 0x9EC JUMP JUMPDEST SWAP10 SWAP8 ADD SWAP6 SWAP5 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x91A JUMP JUMPDEST SWAP1 DUP6 DUP1 DUP7 DUP2 SWAP11 SWAP9 SWAP6 SWAP5 PUSH2 0x987 DUP6 SWAP12 SWAP10 SWAP12 PUSH2 0xB62 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP3 POP SWAP7 SWAP5 SWAP7 SWAP6 SWAP4 SWAP6 PUSH2 0x8EC JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x138 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x138 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x138 JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x9DC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9CC JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0xA28 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x9C9 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x48F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x48F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xAD4 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0xA4B JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x138 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x138 JUMPI DUP2 PUSH1 0x20 PUSH2 0xB0C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0xA8C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xB58 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xB29 JUMPI JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xB1E JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD PUSH2 0xB75 DUP2 PUSH2 0xB0F JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x20 SWAP5 PUSH1 0x1 SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xBE5 JUMPI POP PUSH1 0x1 EQ PUSH2 0xBA6 JUMPI JUMPDEST POP POP POP PUSH2 0xBA4 SWAP3 POP SUB DUP4 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE DUP6 DUP2 KECCAK256 SWAP6 SWAP4 POP SWAP2 SWAP1 JUMPDEST DUP2 DUP4 LT PUSH2 0xBCD JUMPI POP POP PUSH2 0xBA4 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 DUP1 PUSH2 0xB95 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0xBB4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBA4 SWAP6 SWAP4 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP2 POP AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 DUP1 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP3 DUP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 CALLDATACOPY DUP3 ADD SWAP1 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0xC4D JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0xC8B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xC80 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xC74 JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH1 0x1F DUP3 PUSH1 0x20 SWAP5 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 DUP2 DUP7 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xDE SELFDESTRUCT EXTCODESIZE PUSH18 0x9A00A9D0A36F8754532ACFDB6538DBE6B75C 0xD4 PUSH4 0x9B7B0F97 LT 0xE0 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"60:1591:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;291:69;;;;;:::i;:::-;;;;:::i;:::-;60:1591;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;880:65;876:140;;60:1591;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;1063:31;;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1112:33;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;1112:33;;;60:1591;;;;;-1:-1:-1;60:1591:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1112:33;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;876:140;60:1591;;;;;;;;;;;962:16;60:1591;;;;;;;;;;;;;;;962:16;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;876:140;;;;;;;60:1591;;;;;;;;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;;;;;;;;;;;;;;;;;;;;;;;962:16;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;962:16;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;1613:16;;;;60:1591;1613:16;60:1591;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;60:1591:0;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;-1:-1:-1;60:1591:0;;;;;;;;-1:-1:-1;;60:1591:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;60:1591:0;-1:-1:-1;60:1591:0;;-1:-1:-1;60:1591:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;60:1591:0;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"667600","executionCost":"710","totalCost":"668310"},"external":{"getAllBidderIds(string)":"infinite","getBid(string,string)":"infinite","sessionBids(string,string)":"infinite","submitBid(string,string,string,string)":"infinite"}},"methodIdentifiers":{"getAllBidderIds(string)":"4f020ec8","getBid(string,string)":"9da68881","sessionBids(string,string)":"b6584cd1","submitBid(string,string,string,string)":"af868dac"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bidderId\",\"type\":\"string\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"}],\"name\":\"getAllBidderIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bidderId\",\"type\":\"string\"}],\"name\":\"getBid\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"encryptedData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iv\",\"type\":\"string\"}],\"internalType\":\"struct EncryptedBidContract.EncryptedBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"sessionBids\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"encryptedData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iv\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bidderId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"iv\",\"type\":\"string\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllBidderIds(string)\":{\"notice\":\"Get all bidderIds for a session\"},\"getBid(string,string)\":{\"notice\":\"Get bid for a session and bidder\"},\"submitBid(string,string,string,string)\":{\"notice\":\"Submit a bid for a given session\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EncryptedBidContract.sol\":\"EncryptedBidContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":65535},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/EncryptedBidContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract EncryptedBidContract {\\r\\n    struct EncryptedBid {\\r\\n        string encryptedData; // Hex string of encrypted payload\\r\\n        string iv;            // Hex string of AES IV\\r\\n    }\\r\\n\\r\\n    // sessionId => bidderId => bid\\r\\n    mapping(string => mapping(string => EncryptedBid)) public sessionBids;\\r\\n\\r\\n    // sessionId => list of bidderIds\\r\\n    mapping(string => string[]) private sessionBidderIds;\\r\\n\\r\\n    // Event emitted when a bid is submitted\\r\\n    event BidSubmitted(string sessionId, string bidderId);\\r\\n\\r\\n    /// @notice Submit a bid for a given session\\r\\n    function submitBid(\\r\\n        string calldata sessionId,\\r\\n        string calldata bidderId,\\r\\n        string calldata encryptedData,\\r\\n        string calldata iv\\r\\n    ) external {\\r\\n        // If it's a new bidder for the session, track the ID\\r\\n        if (bytes(sessionBids[sessionId][bidderId].encryptedData).length == 0) {\\r\\n            sessionBidderIds[sessionId].push(bidderId);\\r\\n        }\\r\\n\\r\\n        sessionBids[sessionId][bidderId] = EncryptedBid(encryptedData, iv);\\r\\n\\r\\n        emit BidSubmitted(sessionId, bidderId);\\r\\n    }\\r\\n\\r\\n    /// @notice Get bid for a session and bidder\\r\\n    function getBid(string calldata sessionId, string calldata bidderId)\\r\\n        external\\r\\n        view\\r\\n        returns (EncryptedBid memory)\\r\\n    {\\r\\n        return sessionBids[sessionId][bidderId];\\r\\n    }\\r\\n\\r\\n    /// @notice Get all bidderIds for a session\\r\\n    function getAllBidderIds(string calldata sessionId)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        return sessionBidderIds[sessionId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x15b1f4ca4eb61f04693152bffcdd0019f7f790f699fdc38a3d42e06962ad4cd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":13,"contract":"contracts/EncryptedBidContract.sol:EncryptedBidContract","label":"sessionBids","offset":0,"slot":"0","type":"t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_struct(EncryptedBid)6_storage))"},{"astId":18,"contract":"contracts/EncryptedBidContract.sol:EncryptedBidContract","label":"sessionBidderIds","offset":0,"slot":"1","type":"t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)"}],"types":{"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string[])","numberOfBytes":"32","value":"t_array(t_string_storage)dyn_storage"},"t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_struct(EncryptedBid)6_storage))":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => mapping(string => struct EncryptedBidContract.EncryptedBid))","numberOfBytes":"32","value":"t_mapping(t_string_memory_ptr,t_struct(EncryptedBid)6_storage)"},"t_mapping(t_string_memory_ptr,t_struct(EncryptedBid)6_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct EncryptedBidContract.EncryptedBid)","numberOfBytes":"32","value":"t_struct(EncryptedBid)6_storage"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(EncryptedBid)6_storage":{"encoding":"inplace","label":"struct EncryptedBidContract.EncryptedBid","members":[{"astId":3,"contract":"contracts/EncryptedBidContract.sol:EncryptedBidContract","label":"encryptedData","offset":0,"slot":"0","type":"t_string_storage"},{"astId":5,"contract":"contracts/EncryptedBidContract.sol:EncryptedBidContract","label":"iv","offset":0,"slot":"1","type":"t_string_storage"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{"getAllBidderIds(string)":{"notice":"Get all bidderIds for a session"},"getBid(string,string)":{"notice":"Get bid for a session and bidder"},"submitBid(string,string,string,string)":{"notice":"Submit a bid for a given session"}},"version":1}}},"contracts/lib/Address.sol":{"Address":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a94dbc8d4bd644226d4a99f1e25d34ee8fa71d01ff3341faf84122ed71a1f3b264736f6c63430008180033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0x4D 0xBC DUP14 0x4B 0xD6 PREVRANDAO 0x22 PUSH14 0x4A99F1E25D34EE8FA71D01FF3341 STATICCALL 0xF8 COINBASE 0x22 0xED PUSH18 0xA1F3B264736F6C6343000818003300000000 ","sourceMap":"57:214:1:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220a94dbc8d4bd644226d4a99f1e25d34ee8fa71d01ff3341faf84122ed71a1f3b264736f6c63430008180033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0x4D 0xBC DUP14 0x4B 0xD6 PREVRANDAO 0x22 PUSH14 0x4A99F1E25D34EE8FA71D01FF3341 STATICCALL 0xF8 COINBASE 0x22 0xED PUSH18 0xA1F3B264736F6C6343000818003300000000 ","sourceMap":"57:214:1:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"isContract(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":65535},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x05be87878345c7d90712fca0b4311a00d37cc6f275eca64901e90c496e23c73d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/ByteHasher.sol":{"ByteHasher":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a0f8be46464d1d73bb4807726ec946fdc2ff4722eee214b254b1bfe8e3f3f0f564736f6c63430008180033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xF8 0xBE CHAINID CHAINID 0x4D SAR PUSH20 0xBB4807726EC946FDC2FF4722EEE214B254B1BFE8 0xE3 RETURN CREATE CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"57:391:2:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220a0f8be46464d1d73bb4807726ec946fdc2ff4722eee214b254b1bfe8e3f3f0f564736f6c63430008180033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 0xF8 0xBE CHAINID CHAINID 0x4D SAR PUSH20 0xBB4807726EC946FDC2FF4722EEE214B254B1BFE8 0xE3 RETURN CREATE CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"57:391:2:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"hashToField(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/ByteHasher.sol\":\"ByteHasher\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":65535},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/lib/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\",\"keccak256\":\"0x88db38976e1b73bffc44100a067a1e7f289ab8be06fab7f0253ed91dac19cedf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Unsigned math operations with safety checks that revert on error","kind":"dev","methods":{},"title":"SafeMath","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212203419ca9e9eaa8c332ae3948fa32135531b504a736e8905e8e5e8a6643a0a83be64736f6c63430008180033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE NOT 0xCA SWAP15 SWAP15 0xAA DUP13 CALLER 0x2A 0xE3 SWAP5 DUP16 LOG3 0x21 CALLDATALOAD MSTORE8 SHL POP BLOBBASEFEE PUSH20 0x6E8905E8E5E8A6643A0A83BE64736F6C63430008 XOR STOP CALLER ","sourceMap":"157:1453:3:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212203419ca9e9eaa8c332ae3948fa32135531b504a736e8905e8e5e8a6643a0a83be64736f6c63430008180033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE NOT 0xCA SWAP15 SWAP15 0xAA DUP13 CALLER 0x2A 0xE3 SWAP5 DUP16 LOG3 0x21 CALLDATALOAD MSTORE8 SHL POP BLOBBASEFEE PUSH20 0x6E8905E8E5E8A6643A0A83BE64736F6C63430008 XOR STOP CALLER ","sourceMap":"157:1453:3:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Unsigned math operations with safety checks that revert on error\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeMath\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":65535},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x2013bfd2953f3b356a52b6f63c149d47aee82bff51ad3198acf5f0378dc5c166\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}